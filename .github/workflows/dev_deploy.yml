name: team4 Server CI/CD

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2️⃣ JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3️⃣ application.properties 생성 (수정 완료)
      - name: Create application.properties
        run: |
          mkdir -p src/main/resources
          cat <<EOF > src/main/resources/application.properties
spring.application.name=team4

# DB
spring.datasource.url=${{ secrets.RDS_URL }}
spring.datasource.username=${{ secrets.RDS_USERNAME }}
spring.datasource.password=${{ secrets.RDS_PASSWORD }}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
EOF

      # 4️⃣ Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 5️⃣ Gradle 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build

      # 6️⃣ 빌드된 JAR 파일 업로드
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: team4-Server
          path: build/libs/*.jar

      # 7️⃣ 테스트 결과 업로드 (실패해도 계속 진행)
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: build/reports/tests/test/

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # 8️⃣ 빌드된 JAR 다운로드
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: team4-Server
          path: build/libs/

      # 9️⃣ EC2에 배포
      - name: Deploy to EC2
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "$EC2_SSH_KEY" > team4.pem
          chmod 600 team4.pem

          ssh -i team4.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "echo '✅ Connected to EC2'"

          jar_file=$(find build/libs -name '*.jar' ! -name '*plain.jar' | head -n 1)
          echo "🚀 JAR 파일: $jar_file"

          scp -i team4.pem -o StrictHostKeyChecking=no "$jar_file" $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/team4-Server.jar

          ssh -i team4.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST << 'EOF'
            echo "🛑 기존 프로세스 종료 중..."
            pkill -f 'java -jar' || echo "No process running"

            echo "🚀 새 서버 실행 중..."
            nohup java -jar /home/$EC2_USERNAME/team4-Server.jar > /home/$EC2_USERNAME/app.log 2>&1 &
            echo "✅ 배포 완료"
EOF

          rm -f team4.pem
